{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Core Application Framework (CAF) Incubator","text":""},{"location":"#description","title":"Description","text":"<p>This is a monorepo for hosting CAF projects which are in proof-of-concept or limited release phase developed using Node.js, JavaScript, and TypeScript. The monorepo consists of the following types of projects: 1. applications(sandbox) 2. packages(libraries) 3. starters</p>"},{"location":"#table-of-contents","title":"Table of Contents","text":"<ul> <li>Getting Started</li> <li>Installation/Linking</li> <li>Release</li> </ul> <p>Applications: These are the backend/frontend <code>sandbox</code> applications.   Packages: These are shared libraries/packages that can be used across multiple services or applications across <code>pickles</code>.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>To get started with this monorepo, clone the repository and install the dependencies:</p> <pre><code>git clone https://github.com/Pickles-Australia/repo-caf-incubator.git\ncd repo-caf-incubator\n</code></pre>"},{"location":"#installation","title":"Installation","text":"<p>With Lerna and workspaces removed from CAF 2.0, we are now required to install, build &amp; finally link applications manually, which requires cd  &amp; running the command so we came up with some bash scripts in scripts/ folder. </p> <p>How to symlink(link) packages within CAF? There is already a bash script file(link-packages.sh) in scripts folder within root directory created that does linking for you. There is also a dependency-graph.json which is a json object containing the projects with their path, type, dependencies([] if no local dependency). e.g.:</p> <p>It has all the dependencies, project to link with dependencies e.g.: standard-lib is actually a dependency in \"packages/feature-flags\", \"packages/nestjs-service-bus\", \"packages/nestjs-typeorm-transport\", and \"packages/nestjs-secrets-config\" packages. The process is quite simple you just have to run the below from root: 1. chmod +x scripts/link-packages.sh ---&gt;  change the file permissions of the link-packages.sh script to make it executable. 2. scripts/link-packages.sh ---&gt; execute the script file.</p> <pre><code>    [\n        {\n            \"name\": \"@pickles/standard-lib\",\n            \"path\": \"packages/standard-lib\",\n            \"type\": \"library\",\n            \"dependencies\": []    \n        },\n    ]\n</code></pre> <p>The above describes a project pickles/standard-lib with no dependency, it has path from the root. Similary, the below describes a project within dependency-graph.json with a single dependency: <pre><code>    [\n        {\n            \"name\": \"@pickles/nestjs-secrets-config\",\n            \"path\": \"packages/nestjs-secrets-config\",\n            \"type\": \"library\",\n            \"dependencies\": [\n              \"@pickles/standard-lib\"\n            ]\n        },\n    ]\n</code></pre></p> <p>You can add in more dependencies to a project as needed refer <code>@pickles/caf-backend-sandbox</code> section in <code>depedency-graph.json</code> file.</p> <p>Note: If a project is dependent on another project, it should be in a higher order. This ensures that the dependencies are installed, built, and linked first.       available for the dependents. eg: @pickles/standard-lib.       It is required to specify the type of the project whether library or application because library are meant to be linked in various packages/application in CAF 2.0 repository.</p> <p>It does the following: 1. Runs a for loop, cd into the project with the <code>directory path</code> specified in path property of <code>dependency-graph.json</code>. 2. if the type is library(since libraries are meant to be linked) then unlink it. 3. runs npm ci or i by checking if <code>package-lock.json</code> exists or not. 4. checks if dependencies are defined if yes then link all the dependencies at once. 5. builds the project 6. npm link so, that the dependents can link it(only if type=\"library\" defined in depdendency-graph.json)</p> <p>Note: that package-name is taken from package.json &amp; doesn't refer to the directory name</p>"},{"location":"#caf-folder-structure","title":"CAF folder structure","text":"<pre><code>repo-caf-incubator/\n\u251c\u2500\u2500 .github/\n\u2502   \u251c\u2500\u2500 actions/\n\u2502   \u2502   \u2514\u2500\u2500 setup-node-project\n\u2502   \u2502       \u2514\u2500\u2500action.yml\n\u2502   \u2514\u2500\u2500 workflows/\n|       \u251c\u2500\u2500 pages.yml\n|       \u251c\u2500\u2500 pr-lint.yml\n|       \u251c\u2500\u2500 quality.yml\n|       \u251c\u2500\u2500 release.yml\n|       \u2514\u2500\u2500 workflow-sonarcloud-workspaces.yml\n\u251c\u2500\u2500 applications/\n\u2502   \u251c\u2500\u2500 caf-backend-sandbox/\n\u2502   \u2502   \u251c\u2500\u2500 package.json\n\u2502   \u2502   \u2514\u2500\u2500 src/\n\u251c\u2500\u2500 packages/\n\u2502   \u251c\u2500\u2500 ddd-types/\n\u2502   \u2502   \u251c\u2500\u2500 package.json\n\u2502   \u2502   \u2514\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 feature-flags/\n\u2502   \u2502   \u251c\u2500\u2500 package.json\n\u2502   \u2502   \u2514\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 integration-event-handler/\n\u2502   \u2502   \u251c\u2500\u2500 package.json\n\u2502   \u2502   \u2514\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 nestjs-service-bus/\n\u2502   \u2502   \u251c\u2500\u2500 package.json\n\u2502   \u2502   \u2514\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 nestjs-typeorm-transport/\n\u2502   \u2502   \u251c\u2500\u2500 package.json\n\u2502   \u2502   \u2514\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 nestjs-secrets-config/\n\u2502   \u2502   \u251c\u2500\u2500 package.json\n\u2502   \u2502   \u2514\u2500\u2500 src/\n\u2502   \u2514\u2500\u2500 standard-lib/\n\u2502       \u251c\u2500\u2500 package.json\n\u2502       \u2514\u2500\u2500 src/\n\u251c\u2500\u2500 scripts/\n\u2502   \u251c\u2500\u2500 link-packages.sh\n\u2502   \u2502\u2500\u2500 depdendency-graph.json   \n\u2502   \u2514\u2500\u2500 CONTRIBUTING.md\n\u251c\u2500\u2500 starters/\n\u2502   \u251c\u2500\u2500 nestjs-http-fastify/\n\u2502   \u2502   \u251c\u2500\u2500 package.json\n\u2502   \u2502   \u2514\u2500\u2500 src/\n\u2502   \u2514\u2500\u2500 nestjs-typeorm-outbox/\n\u2502       \u251c\u2500\u2500 package.json\n\u2502       \u2514\u2500\u2500 src/\n\u251c\u2500\u2500 .release-please-manifest.json\n\u2502\u2500\u2500 release-please-config.json\n\u2514\u2500\u2500 typedoc.json        \n</code></pre>"},{"location":"#purpose","title":"Purpose","text":"<p>applications/* : Contains a <code>nestjs</code> <code>sandbox</code> application purely meant for testing CAF 2.0 libraries. packages/* : Contains packages that gets published to pickles npm registry, see below: 1. ddd-types: 2. feature-flags: 3. integration-event-handler: Contains decorator which can be commonly used     e.g.: IntegrationEventHandler accepts 3 args          topic(some topic can be kafka or ASB),         eventType: your_event_type         transportId: The transport source eg: KAFKA or ASB 4. nestjs-service-bus:    An npm package that can be used to connect to ASB(Azure service Bus) to connect to topics, queues and publish individual message or as a batch. For more see here https://caf-incubator.pickles.engineering/nestjs-service-bus/</p> <ol> <li>nestjs-typeorm-transport: A package that can be used to run the Outbox logic,     It queries the data from the outbox table for every interval and then it will use handlers from @nestjs/microservices to match the relevant event handler to send the data.     The clients then can receive the event in their controller decorated with the event handler     You can set this from your main.ts, set your own     eg:     <pre><code>     app.connectMicroservice({\n        strategy: new SimpleExponentialOutbox(\n        app.get(getDataSourceToken()),\n        OutboxEntity,\n        {\n            baseInterval: configService.get('OUTBOX_EXPONENTIAL_BASE', 1000),\n            maxInterval: configService.get('OUTBOX_EXPONENTIAL_MAX', 1000),\n            retryLimit: configService.get('OUTBOX_RETRY_LIMIT', 5),\n        },\n        ),\n    });\n</code></pre>     Now, in your controller     <pre><code>     @Controller()\n        export class OutboxController {\n        private readonly logger = new Logger(OutboxController.name);\n\n            @SimpleOutboxEvent(OutboxEventEnum.ASSET_CREATED)\n            async handleAssetCreatedEvent(\n                @Payload() data: Record&lt;string, unknown&gt;,\n                @Ctx() context: OutboxContext&lt;OutboxEntity&gt;,\n            ) {\n                this.logger.log('Received asset updated event with', data);\n                this.logger.log('Event context', context);\n                // do what ever you want, either publish to kafka or asb or anything else\n            }\n        }\n</code></pre>         With this you will not have multiple layers of outbox, inbox to fetch and stream/circulate data. You will save your data from your application in to your outbox table, install the nestjs-typeorm-transport in your app, configure your app to use SimpleExponentialOutbox from your nestjs app and finally create an controller action         decorated with your choice of event, eg: ASSET_CREATED or ASSET_UPDATED or ORDER_DISPATCHED and what not. As already mentioned above the nestjs-typeorm-transport runs a logic internally based on your config that you set, it then picks the record from your outbox table(specified above as OutboxEntity in main.ts). When the app starts it binds/registers all the event handlers(eg: ASSET_CREATED, ASSET_UPDATE, etc.;) with nestjs.<pre><code># How to register your eventType\nWhile you create and outbox event to be saved in your outbox table, you can create a column eventType which holds the eventType(eg: ASSET_CREATED or ASSET_UPDATED, anything else), you are now needed to attach this event to your action method in controller using the decorator in the given eg above.\n</code></pre> <ol> <li>nestjs-secrets-config:</li> <li>standard-lib: A set of utilities</li> </ol> </li> </ol> <p>Starters contain nestjs application presently. The nestjs-typeorm-transport is currently used to test any package present in the packages/ directory, an npm and then test the functionality</p>"},{"location":"#release","title":"Release","text":"<p>This is quite an interesting topic to discuss. CAF 2.0 manages auto release by using google's release-please plugin in combination with google's release-please-action(a github action that uses configs to automate release).</p> <p>Release-please uses a set of config files where you can specify options on how you wish to manage your release. So, there are basically 2 files release-please.config.json, release-please.manifest.json @ the root of directory.  A sample eg of release-please-config.json looks like below: <pre><code>{\n    \"include-v-in-tag\": true,\n    \"tag-separator\": \"@\",\n    \"always-link-local\": true,\n    \"packages\":{\n        \"packages/nestjs-typeorm-transport\": {  \n            \"component\": \"nestjs-typeorm-transport\",                     \n            \"release-type\": \"node\",            \n            \"changelog-path\": \"CHANGELOG.md\"\n        },\n        \"starters/nestjs-typeorm-outbox\": {\n            \"component\": \"nestjs-typeorm-outbox\",\n            \"release-type\": \"node\",\n            \"changelog-path\": \"CHANGELOG.md\"\n        }\n    },\n    \"plugins\":[\n        {\n            \"type\": \"node-workspace\",\n            \"updateAllPackages\": true,\n            \"updatePeerDependencies\": true\n        }\n    ],\n    \"$schema\": \"https://raw.githubusercontent.com/googleapis/release-please/main/schemas/config.json\"\n  }\n</code></pre></p> <p>You can visit https://raw.githubusercontent.com/googleapis/release-please/main/schemas/config.json to understand more about the schemas.   You need to specify the list of projects within \"packages\" with a link to the package from the root directory. You may wish to add some plugins supported see here to include additional behaviour see https://github.com/googleapis/release-please/blob/main/docs/manifest-releaser.md</p> <p>release-please-manifest.json:   manifest base release-please is typically used when you have monorepos, the official docs says: \"The motivation of the manifest-based releaser is support for monorepos\"</p> <p>The manifest file(release-please-manifest.json) is basically a package's version tracking file.</p> <p>How it works in action:   1. Create release-please-config.json &amp; release-please-manifest.json as suggested above.   2. Update workflows to run against the above created config files. <pre><code>     on:\n     push:\n        branches:\n        - main\n\n    permissions:\n    contents: write\n    pull-requests: write\n\n    name: release-please\n\n    jobs:\n    release-please:\n        runs-on: ubuntu-latest\n        steps:\n        - uses: googleapis/release-please-action@v4\n            with:\n            # this assumes that you have created a personal access token\n            # (PAT) and configured it as a GitHub action secret named\n            # `MY_RELEASE_PLEASE_TOKEN` (this secret name is not important).\n            token: ${{ secrets.MY_RELEASE_PLEASE_TOKEN }}\n            # this is a built-in strategy in release-please, see \"Action Inputs\"\n            # for more options\n            release-type: simple\n</code></pre></p> <p>For more see Github official docs for release-please.     When the branch is merged release-please looks for the commit history and evaluates it, it then comes out with the version, see below <pre><code>    fix: which represents bug fixes, and correlates to a SemVer patch.\n    feat: which represents a new feature, and correlates to a SemVer minor.\n    feat!:, or fix!:, refactor!:, etc., which represent a breaking change (indicated by the !) and will result in a SemVer major.\n</code></pre>   Once you create a pr with any of the above commit details and merge the pr, github-actions bot  will then auto create a pr with changelog.md, it also magically updates    package.json dependencies see an existing PR as an example.</p> <p>You have probability to update the changelog.md since its a PR and then merge to proceed once, the bot created PR is merged release-please will generate a github release, git tag with changelogs.</p> <p>Additional Notes:     You may commit some code and merge in the <code>main</code> but would not like to create a release, for eg: you have some code refactors todo, workflow updates with, readme.md changes etc;     You can create a branch with chore as prefix eg: chore(repo): my-sample-refactor-code \u2192 branch name     Each commit should then have a chore eg: chore(repo): removed unused variables ----&gt; commit message with subject and scope</p>"},{"location":"CONTRIBUTING/","title":"Contributing to the Core Application Framework (CAF)","text":""},{"location":"CONTRIBUTING/#got-a-question","title":"Got a Question?","text":"<p>If you would like to chat about the question or enquiry, you can reach out via our slack channel (#core-application-questions).</p>"},{"location":"CONTRIBUTING/#reporting-a-bug","title":"Reporting a Bug","text":""},{"location":"CONTRIBUTING/#requesting-a-featureenhancement","title":"Requesting a Feature/Enhancement","text":""},{"location":"CONTRIBUTING/#submission-guidelines","title":"Submission Guidelines","text":""},{"location":"CONTRIBUTING/#submitting-an-issue","title":"Submitting an Issue","text":""},{"location":"CONTRIBUTING/#submitting-a-pull-request-pr","title":"Submitting a Pull Request (PR)","text":""},{"location":"CONTRIBUTING/#creating-a-new-pacakge","title":"Creating a new Pacakge","text":"<ol> <li>Clone this repository.    <pre><code>git clone https://github.com/Pickles-Australia/repo-caf-incubator.git\n</code></pre></li> <li>Make your changes in a new git branch.    <pre><code>git checkout -b my-branch develop\n</code></pre></li> <li>Implement your code, including any relevant test cases.</li> <li>Please follow the Coding Guidelines.</li> <li>Commit your changes with a message following the Commit Message Guidelines <pre><code>git commit -a\n</code></pre></li> <li>Push you branch to remote Git repository.    <pre><code>git push origin my-branch\n</code></pre></li> <li>Create a PR to repo-caf-incubator:main.</li> <li>If there are any comments<ul> <li>Make the required changes.</li> </ul> </li> </ol> <p>After your PR is merged, please delete your branch from the remote repository.</p> <ul> <li>Delete the remote branch.   <pre><code>git push origin --delete my-branch\n</code></pre></li> <li>Check out main branch.   <pre><code>git checkout develop -f\n</code></pre></li> <li>Delete the local branch.   <pre><code>git branch -D my-branch\n</code></pre></li> <li>Update the main with latest version from remote repository.   <pre><code>git pull --ff upstream develop\n</code></pre></li> </ul>"},{"location":"CONTRIBUTING/#development-setup","title":"Development Setup","text":"<p>Please ensure you have Node.js version &gt;= 18. You are advised to install Node.js using Node Version Manager (NVM).</p> <p>If you want to run the Dockerfiles, you can install podman and podman-compose which is compatible with docker.</p> <p>After cloning the repository, run npm install at the root folder of the repository.</p> <pre><code>npm install\n</code></pre> <p>Other NPM Scripts commands</p> <pre><code># The following commands is to be run at the root folder folder of the repository.\n# 'cd' to the desired folder if you want to run the commands for a specific package/application.\n\n# Build all packages\nnpm run build\n</code></pre>"},{"location":"CONTRIBUTING/#coding-guidelines","title":"Coding Guidelines","text":"<p>We would like to make sure the source code in this repository is clean and consistent.</p> <ul> <li>Ensure that all features, enhancements, and bug fixes have up to date unit test(s).</li> <li>We aspire to follow Google's Typescript Style Guide.</li> </ul> <p>If you find any part of the source code is not following the guidelines do call it out, better still submit a PR! :)</p>"},{"location":"CONTRIBUTING/#commit-message-guidelines","title":"Commit Message Guidelines","text":"<p>Commit messages should follow the Conventional Commits specification.</p> <p>Commit message linting is powered by Husky, which will be configured when you run <code>npm install</code>. If Husky is not linting your commit messages, re-execute <code>npm install</code>.</p> <p>As an example, your commit messages should follow this format:</p> <pre><code>&lt;type&gt;&lt;scope&gt;: &lt;description&gt;\n\n[optional body]\n\n[optional footer(s)]\n</code></pre>"},{"location":"CONTRIBUTING/#type","title":"Type","text":"<p>The default types from <code>@commitlint/config-conventional</code> are supported:</p> <ul> <li><code>build</code>: Changes that affect the build system or external dependencies</li> <li><code>chore</code>: Updating tasks etc; no production code change</li> <li><code>ci</code>: Changes to the CI configuration or files (e.g. GitHub Actions Workflows)</li> <li><code>docs</code>: Documentation only changes</li> <li><code>feat</code>: A new feature</li> <li><code>fix</code>: A bug fix</li> <li><code>perf</code>: A code change that improves performance</li> <li><code>refactor</code>: A code change that neither fixes a bug nor adds a feature</li> <li><code>revert</code>: A change that reverts an earlier commit</li> <li><code>style</code>: Changes that do not affect the meaning of the code (whitespace, formatting, missing semicolons, etc)</li> <li><code>test</code>: Adding missing tests or correcting existing tests</li> </ul>"},{"location":"CONTRIBUTING/#scope","title":"Scope","text":"<p>A list of valid scopes is maintained in <code>commitlint.config.js</code>. Currently, a scope is REQUIRED.</p> <p>These are based on the package/project short names in the repository - e.g. <code>ddd-types</code>, <code>ms-http-fastify</code>, <code>standard-lib</code>, etc.</p> <p>The <code>repo</code> scope may be used when committing changes not related to any specific package, e.g. updating the CI configuration or <code>CONTRIBUTING</code> guideline documentation:</p> <pre><code>chore(repo): Update .gitignore\n</code></pre> <p>If you create a new package or project, you should update the <code>commitlint.config.js</code> with a new scope.</p>"},{"location":"CONTRIBUTING/#multiple-scopes","title":"Multiple Scopes","text":"<p>A commit may not have multiple scopes. If your changes affect multiple scopes, split them into individual commits with a specific scope each.</p>"},{"location":"CONTRIBUTING/#creating-a-new-package","title":"Creating a new Package","text":"<p>Getting started with a new package in caf 2.0 requires standard installation of typescript, eslint, rimraf, jest,</p>"},{"location":"RELEASING/","title":"RELEASING","text":""},{"location":"RELEASING/#creating-a-release-with-release-please","title":"Creating a Release with release-please","text":"<p>CAF 2.0 started using release-please to automate releases. Release Please automates CHANGELOG generation, the creation of GitHub releases, and version bumps for your projects. It does so by parsing your git history, looking for Conventional Commit messages, and creating release PRs.</p> <p>An easier and simple way of using release-please is to use it with a combination of github action and specifying the settings in config file.</p> <p>To create a new release using <code>release-please</code>, follow these steps: 1. Create your pr:     Release please follows conventional commits to create a release, this repo is already configured to follow conventional commits so no worries, make your changes and commit your code, create your pr.</p> <ol> <li> <p>Review and merge the release PR:     A user creates a pr, it gets reviewed, approved and finally merged.     Once your pr is merged release please creates a pr specifying the versions, changelogs, it automatically updates the <code>package.json</code> and <code>package-lock.json</code>, creates/updates the <code>CHANGELOG.md</code>     Once the release pull request is generated, review the changes. Ensure that the version bump and changelog are correct. After reviewing, merge the pull request. This will trigger the release process.</p> </li> <li> <p>Post merge Release Please PR</p> <ol> <li>Updates your changelog file (for example CHANGELOG.md), along with other language specific files(for example package.json).</li> <li>Tags the commit with the version number</li> <li>Creates a GitHub Release based on the tag</li> </ol> <p>How does a github action looks like on a high level:</p> <p><pre><code>    on:\n        push:\n            branches:\n            - main\n\n        permissions:\n        contents: write\n        pull-requests: write\n\n        name: release-please\n\n        jobs:\n        release-please:\n            runs-on: ubuntu-latest\n            steps:\n            - uses: googleapis/release-please-action@v4\n                with:\n                # this assumes that you have created a personal access token\n                # (PAT) and configured it as a GitHub action secret named\n                # `MY_RELEASE_PLEASE_TOKEN` (this secret name is not important).\n                token: ${{ secrets.MY_RELEASE_PLEASE_TOKEN }}\n                # this is a built-in strategy in release-please, see \"Action Inputs\"\n                # for more options\n                release-type: simple\n</code></pre>     Post release you may wish to <code>publish</code> <code>packages</code> to <code>npm</code>, release-please doesn't take care of publishing your packages &amp; this needs additional configuration, post above steps you can publish, see below:</p> <p>```plaintext   - name: Build packages for ${{ matrix.projectDirectory }}     run: |         npm run build     working-directory: ${{ matrix.projectDirectory }}</p> <ul> <li>name: Publish     working-directory: ${{ matrix.projectDirectory }}     run: npm publish     env:         NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}</li> </ul> <p>```plaintext</p> </li> <li> <p>Configure release-please:     Create a configuration file named <code>.release-please-config.json</code> in the root of your repository. Here is an example configuration:     <pre><code>{\n  \"release-type\": \"node\",\n  \"packages\": {\n     \".\": {}\n  }\n}\n</code></pre>     This configuration specifies the type of release and the packages to be included in the release process.</p> </li> <li> <p>Create a release-please manifest file:     Create a file named <code>release-please-manifest.json</code> in the root of your repository. This file will keep track of the versions of your packages. Here is an example:     <pre><code>{\n  \"packages\": {\n    \".\": {\n      \"release-type\": \"node\"\n    }\n  }\n}\n</code></pre></p> </li> </ol>"},{"location":"RELEASING/#how-to-manually-change-the-version-number","title":"How to manually change the version number?","text":"<p>When a commit to the main branch has Release-As: x.x.x (case insensitive) in the commit body, Release Please will open a new pull request for the specified version.</p> <p>Empty commit example:</p> <p>git commit --allow-empty -m \"chore: release 2.0.0\" -m \"Release-As: 2.0.0\" </p>"},{"location":"RELEASING/#example-of-conventional-commits","title":"Example of conventional commits","text":"<p>1) fix: which represents bug fixes, and correlates to a SemVer patch. 2) feat: which represents a new feature, and correlates to a SemVer minor. 3) feat!:, or fix!:, refactor!:, etc., which represent a breaking change (indicated by the !) and will result in a SemVer major. For more info on conventional commits refer offcial docs here https://www.conventionalcommits.org/en/v1.0.0/</p>"},{"location":"RELEASING/#labels","title":"Labels","text":"<p>The status label on the PR itself define the current status of a release please pr:</p> <p>autorelease: pending is the initial state of the Release PR before it is merged autorelease: tagged means that the Release PR has been merged and the release has been tagged in GitHub autorelease: snapshot is a special state for snapshot version bumps autorelease: published means that a GitHub release has been published based on the Release PR (release-please does not automatically add this tag).</p>"},{"location":"RELEASING/#dry-run-release-please","title":"Dry Run Release Please","text":"<p>Release please can be ran on dry run mode to verify/review the outcome of a release before actually merging a pr, if confifured in the github actions you can see the logs printing the version update, changelogs, package.json updates &amp; a bunch of other info.</p> <pre><code>name: Dry Run Release\non:\n  workflow_dispatch:\n\njobs:\n  dry-run-release:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v3\n        with:\n         node-version: lts/*\n\n      - name: Install release-please\n        run: npm install -g release-please\n\n      - name: Run release-please (dry-run mode)\n        run: |\n            echo \"Repository url is: ${{ github.repository }}\"\n            release-please release-pr --token=${{ secrets.GITHUB_TOKEN }} --repo-url=https://github.com/${{ github.repository }} --dry-run\n            release-please manifest-pr --token=${{ secrets.GITHUB_TOKEN }} --repo-url=https://github.com/${{ github.repository }} --dry-run\n</code></pre> <p>By following these steps, you can create and publish a new release using <code>release-please</code> in a simple and efficient manner.</p>"},{"location":"date-helpers/","title":"date-helpers (@iam/date-helpers)","text":""},{"location":"date-helpers/#overview","title":"Overview","text":"<p>The <code>date-helpers</code> package is a comprehensive library of utility functions and classes designed to streamline and simplify your JavaScript and TypeScript development. This package provides a wide range of functionalities, from data manipulation and validation to advanced error handling and logging.</p> <p>With <code>date-helpers</code>, you can reduce boilerplate, improve code readability, and ensure consistency across your codebase. The package is designed with a focus on performance, robustness, and ease of use.</p> <p>Whether you're working on a small project or a large-scale application, <code>date-helpers</code> can help you write cleaner, more efficient, and more maintainable code. It's a must-have tool for any JavaScript or TypeScript developer.</p> <p>Exception Option Result</p>"},{"location":"date-helpers/#exception","title":"Exception","text":"<p>The <code>Exception</code> class is a powerful tool for handling errors in a consistent and informative way. Here's how you can use it:</p> <pre><code>import { Exception } from '@iam/date-helpers';\n\nclass CustomException extends Exception {}\n\ntry {\n  // Some operation that can throw an error\n  throw new CustomException('Something went wrong');\n} catch (error) {\n  if (error instanceof Exception) {\n    console.error(error); // 'Something went wrong'\n  } else {\n    // Handle other types of errors\n  }\n}\n\n// Returns an object literal representation of the exception.\nconst errObject = error.toObject();\n\n// Returns a string representation of the exception object.\nconst errString = error.toString();\n\n/* The object model of the base Exception class.\nerror: {\n      \"label\": \"UserAlreadyExistsException\",\n      \"code\": 422,\n      \"message\": \"User already exists.\",\n      \"details\": \"User with email: john.smith@email.com already exists.\",\n      \"stack\":\n          UserAlreadyExistsException: User already exists.\n              at Object.value (/Workspace/projects/repo-caf-incubator/starters/nestjs-http-fastify/src/users/users.service.ts:46:41)\n              at Value.match (/Workspace/projects/repo-caf-incubator/packages/date-helpers/src/option.ts:173:14)\n              at UsersService.create (/Workspace/projects/repo-caf-incubator/starters/nestjs-http-fastify/src/users/users.service.ts:45:41)\n              at UsersController.createUser (/Workspace/projects/repo-caf-incubator/starters/nestjs-http-fastify/src/users/users.controller.ts:55:44)\n              at /Workspace/projects/repo-caf-incubator/node_modules/@nestjs/core/router/router-execution-context.js:38:29\n              at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    }\n*/\n</code></pre>"},{"location":"date-helpers/#option","title":"Option","text":"<p>The <code>Option</code> type represents the possibly a value can contain some value or nothing (null/undefined). In declaration <code>Option&lt;T&gt;</code> generic type, it either be a subclass of <code>Value&lt;T&gt;</code> which will have a value or <code>None</code> which is null/undefined. The APIs are the for both <code>Value&lt;T&gt;</code> and <code>None</code> which allows chained operations with each method's behaviour adapted to respective subclass type.</p> <pre><code>import { Option, Value, None } from '@iam/date-helpers';\n\nconst value = Value('Hello World!'); // Value is a subclass of Option&lt;T&gt; abstract class representing a value.\n\nconst none = None(); // None is subclass of Option&lt;T&gt; abstract class representing null/undefined.\n\n// Value&lt;T&gt; and None can be created using the of() static factory method.\nconst value = Option.of('Hello, world!');\nvalue.hasValue(); // true\n\nconst none = Option.of(undefined);\nnone.hasValue(): // false\n\n// Retrieve a value from an Option object.\n\nconst value = Option.of('Hello, world!');\nconst message = valueOrNone.getValue(); // message = 'Hello World!'\n\nconst none = Option.of(undefined)\nconst message = valueOrNone.getValue(); // throw Error.\n\n// Retrieve a value or a default value from an Option object.\n\nconst value = Option.of('Hello, world!');\nconst message = value.getValueOrDefault('No message found!'); // message = 'Hello World!'\n\nconst none = Option.of(undefined);\nconst message = none.getValueOrDefault('No message found!'); // message = 'No message found!'\n\n// Perform a map (v) =&gt; v operation\n\nconst value = Option.of('Hello, world!');\nconst message = value\n                  .map((v) =&gt; v.toUpperCase())\n                  .getValue();  // message = 'HELLO WORLD!'\n\n// Perform a bind (v) =&gt; Option&lt;T&gt; operation\n\nconst value = Option.of('Hello, world!');\nconst message = value\n                  .bind((v) =&gt; Option.of(v.toUpperCase()))\n                  .getValue(); // message = 'HELLO WORLD!'\n\n// Perform a filter operation\n\nconst value = Option.of('Hello, world!');\nconst message = value\n                  .filter((v) =&gt; v !== 'Hello World!')\n                  .hasValue(); // false\n\n// Use `match` to handle both the Some and None cases\n\nconst value = Option.of('Hello, world!');\nconst message = value.match({\n  value: (v) =&gt; 'Greeting: ' + v,\n  none: () =&gt; 'No message found!'\n}); // message = 'Greeting: Hello world!'\n\n\n// Chained operations, map and filter operations will be skipped if customer does not exists in the repository\n\nconst customerOrNone = Option.of(await customerRepository.findById('cust-007'))\n                        .map((customer) =&gt;\n                        {\n                          customer.fullName = customer.firstName + customer.lastName;\n                          return customer;\n                        })\n                        .filter((customer) =&gt; customer.age &gt; 25)\n                        .match({\n                          value: customer,\n                          none: throw new Error('Customer does not exists!')\n                        });\n</code></pre>"},{"location":"date-helpers/#result","title":"Result","text":"<pre><code>import { Result, Success, Failure } from '@iam/date-helpers'\n\nfunction divide(x: number, y: number): Result&lt;Error, number&gt; {\n  return y === 0 ? Result.failure(new Error('Division by zero error!')) : Result.success(x/y);\n}\n\nconst goodResult = divide(100, 10);\nconst badResult = divide(100, 0)\n\n// Get value for Result&lt;TL, TR&gt;\n\nconst value = goodResult.getValue() // value = 10\n\nconst value = badResult.getValue() // Throw error!\n\n// Perform map operation of Result&lt;TL, TR&gt;\n\nconst value = goodResult.map((v) =&gt; v * 20)\n                        .getValue() // value = 200\n\n// Perform bind operation of Result&lt;TL, TR&gt;\n\nconst value = badResult.bind((v) =&gt; Result.success(v * 20))\n                        .getValue() // value = 200\n\n\n\n//\n</code></pre>"},{"location":"date-helpers/API/","title":"Index","text":""},{"location":"date-helpers/API/#functions","title":"Functions","text":"Function Description formatDate - parseDate -"},{"location":"date-helpers/API/functions/formatDate/","title":"formatDate","text":"<p>@smart-utilities/date-helpers / formatDate</p> <p>formatDate(<code>date</code>, <code>format</code>): <code>string</code></p> <p>Defined in: date-helper.ts:7</p>"},{"location":"date-helpers/API/functions/formatDate/#parameters","title":"Parameters","text":"Parameter Type <code>date</code> <code>Date</code> <code>format</code> <code>string</code>"},{"location":"date-helpers/API/functions/formatDate/#returns","title":"Returns","text":"<p><code>string</code></p>"},{"location":"date-helpers/API/functions/parseDate/","title":"parseDate","text":"<p>@smart-utilities/date-helpers / parseDate</p> <p>parseDate(<code>dateString</code>, <code>format</code>): <code>null</code> | <code>Date</code></p> <p>Defined in: date-parse.ts:1</p>"},{"location":"date-helpers/API/functions/parseDate/#parameters","title":"Parameters","text":"Parameter Type Default value <code>dateString</code> <code>any</code> <code>undefined</code> <code>format</code> <code>string</code> <code>'YYYY-MM-DD'</code>"},{"location":"date-helpers/API/functions/parseDate/#returns","title":"Returns","text":"<p><code>null</code> | <code>Date</code></p>"},{"location":"feature-flags/","title":"Standard-Lib (@pickles/standard-lib)","text":""},{"location":"feature-flags/#overview","title":"Overview","text":"<p>The <code>standard-lib</code> package is a comprehensive library of utility functions and classes designed to streamline and simplify your JavaScript and TypeScript development. This package provides a wide range of functionalities, from data manipulation and validation to advanced error handling and logging.</p> <p>With <code>standard-lib</code>, you can reduce boilerplate, improve code readability, and ensure consistency across your codebase. The package is designed with a focus on performance, robustness, and ease of use.</p> <p>Whether you're working on a small project or a large-scale application, <code>standard-lib</code> can help you write cleaner, more efficient, and more maintainable code. It's a must-have tool for any JavaScript or TypeScript developer.</p> <p>Exception Option Result</p>"},{"location":"feature-flags/#exception","title":"Exception","text":"<p>The <code>Exception</code> class is a powerful tool for handling errors in a consistent and informative way. Here's how you can use it:</p> <pre><code>import { Exception } from '@pickles/standard-lib';\n\nclass CustomException extends Exception {}\n\ntry {\n  // Some operation that can throw an error\n  throw new CustomException('Something went wrong');\n} catch (error) {\n  if (error instanceof Exception) {\n    console.error(error); // 'Something went wrong'\n  } else {\n    // Handle other types of errors\n  }\n}\n\n// Returns an object literal representation of the exception.\nconst errObject = error.toObject();\n\n// Returns a string representation of the exception object.\nconst errString = error.toString();\n\n/* The object model of the base Exception class.\nerror: {\n      \"label\": \"UserAlreadyExistsException\",\n      \"code\": 422,\n      \"message\": \"User already exists.\",\n      \"details\": \"User with email: john.smith@email.com already exists.\",\n      \"stack\":\n          UserAlreadyExistsException: User already exists.\n              at Object.value (/Workspace/projects/repo-caf-incubator/starters/nestjs-http-fastify/src/users/users.service.ts:46:41)\n              at Value.match (/Workspace/projects/repo-caf-incubator/packages/standard-lib/src/option.ts:173:14)\n              at UsersService.create (/Workspace/projects/repo-caf-incubator/starters/nestjs-http-fastify/src/users/users.service.ts:45:41)\n              at UsersController.createUser (/Workspace/projects/repo-caf-incubator/starters/nestjs-http-fastify/src/users/users.controller.ts:55:44)\n              at /Workspace/projects/repo-caf-incubator/node_modules/@nestjs/core/router/router-execution-context.js:38:29\n              at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    }\n*/\n</code></pre>"},{"location":"feature-flags/#option","title":"Option","text":"<p>The <code>Option</code> type represents the possibly a value can contain some value or nothing (null/undefined). In declaration <code>Option&lt;T&gt;</code> generic type, it either be a subclass of <code>Value&lt;T&gt;</code> which will have a value or <code>None</code> which is null/undefined. The APIs are the for both <code>Value&lt;T&gt;</code> and <code>None</code> which allows chained operations with each method's behaviour adapted to respective subclass type.</p> <pre><code>import { Option, Value, None } from '@pickles/standard-lib';\n\nconst value = Value('Hello World!'); // Value is a subclass of Option&lt;T&gt; abstract class representing a value.\n\nconst none = None(); // None is subclass of Option&lt;T&gt; abstract class representing null/undefined.\n\n// Value&lt;T&gt; and None can be created using the of() static factory method.\nconst value = Option.of('Hello, world!');\nvalue.hasValue(); // true\n\nconst none = Option.of(undefined);\nnone.hasValue(): // false\n\n// Retrieve a value from an Option object.\n\nconst value = Option.of('Hello, world!');\nconst message = valueOrNone.getValue(); // message = 'Hello World!'\n\nconst none = Option.of(undefined)\nconst message = valueOrNone.getValue(); // throw Error.\n\n// Retrieve a value or a default value from an Option object.\n\nconst value = Option.of('Hello, world!');\nconst message = value.getValueOrDefault('No message found!'); // message = 'Hello World!'\n\nconst none = Option.of(undefined);\nconst message = none.getValueOrDefault('No message found!'); // message = 'No message found!'\n\n// Perform a map (v) =&gt; v operation\n\nconst value = Option.of('Hello, world!');\nconst message = value\n                  .map((v) =&gt; v.toUpperCase())\n                  .getValue();  // message = 'HELLO WORLD!'\n\n// Perform a bind (v) =&gt; Option&lt;T&gt; operation\n\nconst value = Option.of('Hello, world!');\nconst message = value\n                  .bind((v) =&gt; Option.of(v.toUpperCase()))\n                  .getValue(); // message = 'HELLO WORLD!'\n\n// Perform a filter operation\n\nconst value = Option.of('Hello, world!');\nconst message = value\n                  .filter((v) =&gt; v !== 'Hello World!')\n                  .hasValue(); // false\n\n// Use `match` to handle both the Some and None cases\n\nconst value = Option.of('Hello, world!');\nconst message = value.match({\n  value: (v) =&gt; 'Greeting: ' + v,\n  none: () =&gt; 'No message found!'\n}); // message = 'Greeting: Hello world!'\n\n\n// Chained operations, map and filter operations will be skipped if customer does not exists in the repository\n\nconst customerOrNone = Option.of(await customerRepository.findById('cust-007'))\n                        .map((customer) =&gt;\n                        {\n                          customer.fullName = customer.firstName + customer.lastName;\n                          return customer;\n                        })\n                        .filter((customer) =&gt; customer.age &gt; 25)\n                        .match({\n                          value: customer,\n                          none: throw new Error('Customer does not exists!')\n                        });\n</code></pre>"},{"location":"feature-flags/#result","title":"Result","text":"<pre><code>import { Result, Success, Failure } from '@pickles/standard-lib'\n\nfunction divide(x: number, y: number): Result&lt;Error, number&gt; {\n  return y === 0 ? Result.failure(new Error('Division by zero error!')) : Result.success(x/y);\n}\n\nconst goodResult = divide(100, 10);\nconst badResult = divide(100, 0)\n\n// Get value for Result&lt;TL, TR&gt;\n\nconst value = goodResult.getValue() // value = 10\n\nconst value = badResult.getValue() // Throw error!\n\n// Perform map operation of Result&lt;TL, TR&gt;\n\nconst value = goodResult.map((v) =&gt; v * 20)\n                        .getValue() // value = 200\n\n// Perform bind operation of Result&lt;TL, TR&gt;\n\nconst value = badResult.bind((v) =&gt; Result.success(v * 20))\n                        .getValue() // value = 200\n\n\n\n//\n</code></pre>"},{"location":"feature-flags/API/","title":"Index","text":""},{"location":"feature-flags/API/#variables","title":"Variables","text":"Variable Description featureFlagService -"},{"location":"feature-flags/API/variables/featureFlagService/","title":"featureFlagService","text":"<p>@smart-utilities/feature-flags / featureFlagService</p> <p><code>const</code> featureFlagService: <code>FeatureFlagService</code></p> <p>Defined in: helper.ts:4</p>"}]}